# Задание 1. Встроенные типы данных, операторы, функции и генераторы
#
# Напишите реализации объявленных ниже функций. Для проверки
# корректности реализации ваших функций, запустите тесты:
#
# pytest test_homework01.py
#
# Если написанный вами код не содержит синтаксических ошибок,
# вы увидите результаты тестов ваших решений.


def fac(n):
    """
    Факториал

    Факториал числа N - произведение всех целых чисел от 1 до N
    включительно. Например, факториал числа 5 - произведение
    чисел 1, 2, 3, 4, 5.

    Функция должна вернуть факториал аргумента, числа n.
    """
    if isinstance(n, int) and n >= 0:
        return 1 if (n < 1) else n * fac(n - 1)
    else:
        raise ValueError


def gcd(a, b):
    """
    Наибольший общий делитель (НОД) для двух целых чисел.

    Предполагаем, что оба аргумента - положительные числа
    Один из самых простых способов вычесления НОД - метод Эвклида,
    согласно которому

    1. НОД(a, 0) = a
    2. НОД(a, b) = НОД(b, a mod b)

    (mod - операция взятия остатка от деления, в python - оператор '%')
    """
    if isinstance(a, int) and isinstance(b, int):
        if b > a:
            a, b = b, a
        return b if (a % b == 0) else gcd(b, a % b)
    else:
        raise ValueError


def fib():
    """
    Генератор для ряда Фибоначчи

    Вам необходимо сгенерировать бесконечный ряд чисел Фибоначчи,
    в котором каждый последующий элемент ряда является суммой двух
    предыдущих. Начало последовательности: 1, 1, 2, 3, 5, 8, 13, ..

    Подсказка по реализации: для бесконечного цикла используйте идиому

    while True:
      ..

    """
    prev = 0
    prev_prev = 0
    while True:
        n = 1 if (prev + prev_prev == 0) else prev + prev_prev
        yield n
        prev, prev_prev = n, prev


def flatten(*seq):
    """
    Функция, преобразующая вложенные последовательности любого уровня
    вложенности в плоские, одноуровневые.

    r>>> flatten([])
    []
    r>>> flatten([1, 2])
    [1, 2]
    r>>> flatten([1, [2, [3]]])
    [1, 2, 3]
    r>>> flatten([(1, 2), (3, 4)])
    [1, 2, 3, 4]
    """
    result = []
    for arg in seq:
        if type(arg).__name__ not in ('list', 'set', 'tuple'):
            result.append(arg)
        else:
            for x in flatten(*arg):
                result.append(x)
    return result
